-- | build latex file listing MDL graphs from `BenchmarkSummary` JSON file
-- USAGE
-- $0 *-bm.json
-- where
--  *-bm.json should be generated by 
--  at restart point, the 1st element is set to -1
{-# LANGUAGE
    OverloadedStrings
  , ScopedTypeVariables
  , ViewPatterns
 #-}

module Main where

import Control.Applicative
import Control.Monad
import Data.Aeson
import qualified Data.ByteString.Lazy as B
import Data.List
import Numeric (showFFloat)
import System.Console.GetOpt
import System.Environment (getArgs)
import qualified System.Posix.Files as File
import Text.Printf
import Sih4LogFormat

data ConfigurationOption = ConfigurationOption
                           {
                             columns :: Int
                           , rows    :: Int
                           , sourceExtension :: String
                           }

defaultConfigration = ConfigurationOption
    {
      columns = 4
    , rows    = 3
    , sourceExtension = "png"
    }

options :: [OptDescr (ConfigurationOption -> ConfigurationOption)]
options =
  [
    Option ['c', 'n'] ["columns"]
    (ReqArg (\v c -> c { columns = read v }) (show (columns defaultConfigration)))
    "number of graphs in a line"
  , Option ['r', 'm'] ["rows"]
    (ReqArg (\v c -> c { rows = read v }) (show (rows defaultConfigration)))
    "number of lines in a page"
  , Option ['e'] ["source-extention"]
    (ReqArg (\v c -> c { sourceExtension = v }) (show (sourceExtension defaultConfigration)))
    "file extension of graph files"
  ]
usage :: String
usage = "Usage: analyzeAssignLogToDF [OPTIONS] < output-log"

parseOptions :: [String] -> IO ConfigurationOption
parseOptions argv =
    case getOpt Permute options argv of
      (o, _, []) -> do
        let conf = foldl (flip id) defaultConfigration o
        return $ conf
      (_, _, errs) -> ioError (userError (concat errs ++ usageInfo usage options))

main :: IO ()
main = do
  conf <- parseOptions =<< getArgs
  Just (j :: BenchmarkSummary) <- decode <$> B.getContents
  let nCol = columns conf
  let nImages = rows conf * nCol
  let es = filter ((0 <) . bmExecutionTime) $ benchmarkResults j
  let problems = nub $ map bmTargetName es
  putStrLn $ populateLatexHeader conf
  forM_ problems $ \problem -> do
    putStrLn $ printf "\\section{%s}\n" problem
    putStrLn $ populateTabularHeader conf
    forM_ (zip [1 ..] (filter ((problem ==) . bmTargetName) es)) $ \(i, entry@(BenchmarkEntry n p e f)) -> do
      putStr =<< populateTabularRow conf p e f
      putStrLn $ if (mod i nCol == 0) then "\\\\" else "&"
      when (mod i nImages == 0) $ do
        putStrLn $ populateTabularTrailer conf
        putStrLn $ populateTabularHeader conf
    putStrLn $ populateTabularTrailer conf
  putStrLn $ populateLatexTrailer conf

populateLatexHeader :: ConfigurationOption -> String
populateLatexHeader conf =
  printf
      ( "\\documentclass[a4,landscape]{article}\n"
        ++ "\\usepackage[a4paper,landscape]{geometry}\n"
        ++ "\\usepackage{graphicx}\n"
        ++ "\\addtolength{\\textheight}{18mm}"
        ++  "\\begin{document}"
      )

populateTabularHeader :: ConfigurationOption -> String
populateTabularHeader conf =
  printf
      ( "\\begin{tabular}{*{%d}{p{%s\\textwidth}}}"
      )
      (columns conf) (columnWidth conf)

populateTabularRow :: ConfigurationOption -> String -> Double -> String -> IO String
populateTabularRow conf p t f = do
  let
    pp :: String -> String      -- add a space after each comma
    pp str = concat [ if s == ',' then ", " else [s] | s <- str]
  exists <- File.fileExist f
  if exists
    then
        return $ printf
        (
          "\\begin{minipage}{%s\\textwidth}\n"
          ++ "%s \\hfill %8.3f\\\\ \\includegraphics[width=0.98\\textwidth]{{%s}.%s}\n"
          ++ "\\end{minipage}\n"
        )
        (columnWidth conf) (pp p) t (reverse . drop 4 . reverse $ f) (sourceExtension conf)
    else
        return $ printf
        (
          "\\begin{minipage}{%s\\textwidth}\n"
          ++ "%s \\hfill %8.3f\\\\ no graph\n"
          ++ "\\end{minipage}\n"
        )
        (columnWidth conf) (pp p) t

populateTabularTrailer :: ConfigurationOption -> String
populateTabularTrailer conf =
  printf
      ( "\\end{tabular}\n"
      )

columnWidth :: ConfigurationOption -> String
columnWidth (columns -> 4) = "0.24"
columnWidth (columns -> 5) = "0.19"
columnWidth _ = "0.15"

populateLatexTrailer :: ConfigurationOption -> String
populateLatexTrailer conf = printf "\\end{document}"

